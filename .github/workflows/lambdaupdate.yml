name: Auto 1 pr test

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  Create_Branch:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.create_branch.outputs.branch_name }}
    steps:
      - name: Checkout dockerlibrary
        uses: actions/checkout@v4.1.1
        with:
          path: 'dockerlibrary'
          ref: master

      - name: Create new branch with date and feature tag
        id: create_branch
        run: |
          cd dockerlibrary
          branch_name=$(date -u "+feature/lambdaAutoUpdate-%Y%m%d-%H%M%S")
          git checkout -b $branch_name
          echo "branch_name=$branch_name" >> $GITHUB_ENV
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

      - name: Push branch to remote repository
        run: |
          cd dockerlibrary
          git push origin ${{ steps.create_branch.outputs.branch_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_PAT }}    

  Replace_Files:
    needs: Create_Branch
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - aws_image: 'java11'
            local_dir: 'java/11'
          - aws_image: 'java17'
            local_dir: 'java/17'  
          - aws_image: 'dotnet6'
            local_dir: 'dotnet/6'
          - aws_image: 'nodejs16.x'
            local_dir: 'nodejs/16'
          - aws_image: 'python3.8'
            local_dir: 'python/3.8'
          - aws_image: 'python3.9'
            local_dir: 'python/3.9'  
          - aws_image: 'python3.10'
            local_dir: 'python/3.10'
          - aws_image: 'python3.11'
            local_dir: 'python/3.11'
          - aws_image: 'python3.12'
            local_dir: 'python/3.12' 
      max-parallel: 1  # Limit parallel execution of jobs

    steps:      
      - name: Checkout dockerlibrary (Feature Branch)
        uses: actions/checkout@v4.1.1
        with:
          path: 'dockerlibrary'
          ref: ${{ needs.Create_Branch.outputs.branch_name }}
                           
      - name: Checkout aws_repo
        uses: actions/checkout@v4.1.1
        with: 
          repository: 'aws/aws-lambda-base-images'
          path: 'aws_repo'
          ref: ${{ matrix.aws_image }}

      - name: List Directories and Output Environment Details
        run: |
          ls -all aws_repo
          ls -all aws_repo/x86_64/
          ls -all dockerlibrary/lambda/${{ matrix.local_dir }}/
          pwd
               
      - name: Synchronize Based on Content Difference
        run: |
          aws_repo_dir="aws_repo/x86_64"
          docker_repo_dir="dockerlibrary/lambda/${{ matrix.local_dir }}/"
          update_required=false
        
          declare -A aws_files_hash
          declare -A docker_files_hash
          
          for file in $aws_repo_dir/*.tar.xz; do
            hash=$(sha256sum "$file" | awk '{print $1}')
            aws_files_hash["$hash"]=$(basename "$file")
          done
        
          for file in $docker_repo_dir/*.tar.xz; do
            hash=$(sha256sum "$file" | awk '{print $1}')
            docker_files_hash["$hash"]=$(basename "$file")
          done
        
          for hash in "${!aws_files_hash[@]}"; do
            if [[ ! ${docker_files_hash["$hash"]+_} ]]; then
              update_required=true
              break
            fi
          done
        
          if [ "$update_required" = true ]; then
            echo "Differences detected, updating dockerlibrary repo..."
            rm -f $docker_repo_dir*.tar.xz
            for file in "${aws_files_hash[@]}"; do
              cp "$aws_repo_dir/$file" "$docker_repo_dir/"
            done
          else
            echo "No differences found, no update required."
          fi

      - name: Update Dockerfile with current .tar.xz files
        run: |
          docker_repo_dir="dockerlibrary/lambda/${{ matrix.local_dir }}/"
          cd $docker_repo_dir          
          csplit Dockerfile /ENV\ LANG=en_US.UTF-8/ {*}
          sed -i '/ADD .*\.tar\.xz \//d' xx00          
          echo "" > new_adds.txt
          for tar_file in *.tar.xz; do
            echo "ADD $tar_file /" >> new_adds.txt
          done          
          cat xx00 new_adds.txt xx01 > Dockerfile
          rm xx00 xx01 new_adds.txt

      - name: Push changes to the new branch
        run: |
          cd dockerlibrary
          git config user.name 'GitHub Actions'
          git config user.email 'actions@github.com'
          git add lambda/${{ matrix.local_dir }}/
          git commit -m "Update source for ${{ matrix.local_dir }} image" || echo "No changes to commit for ${{ matrix.local_dir }}"
          git push origin ${{ needs.Create_Branch.outputs.branch_name }}
        env:
          MY_GITHUB_PAT: ${{ secrets.MY_GITHUB_PAT }}  
  
  Check_For_Updates:
    needs: [Replace_Files]
    runs-on: ubuntu-latest
    outputs:
      updates_made: ${{ steps.count_commits.outputs.updates_made }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ needs.Create_Branch.outputs.branch_name }}
      
      - name: Count Commits
        id: count_commits
        run: |
          commit_count=$(git rev-list --count HEAD)
          echo "Number of commits in the branch: $commit_count"
          if [ "$commit_count" -gt 1 ]; then  # Assuming the first commit is the branch creation
            echo "::set-output name=updates_made::true"
          else
            echo "::set-output name=updates_made::false"
          fi

  
  Generate_PR:
    needs: [Replace_Files, Create_Branch, Check_For_Updates]
    if: needs.Check_For_Updates.outputs.updates_made == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Create Pull Request
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.MY_GITHUB_PAT }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const pullRequestFilePath = path.join(process.env.GITHUB_WORKSPACE, 'PULL_REQUEST_TEMPLATE.md');                  
            const body = fs.readFileSync(pullRequestFilePath, 'utf8');
            const title = "Update source for ${{ matrix.local_dir }} image";
            const head = `${{ needs.Create_Branch.outputs.branch_name }}`; // The branch name you've pushed to
            const base = 'main'; // The branch you want to merge the changes into
            const draft = false; // Set to true if you want the PR to be created as a draft
            github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              head: head,
              base: base,
              draft: draft,
            });
            
