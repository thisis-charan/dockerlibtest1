name: Update AWS Lambda Images

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Specific Branches
        run: |
          set -e
          git clone --branch java11 --depth 1 "https://github.com/aws/aws-lambda-base-images.git" aws-lambda-java11
          echo "Cloned java11 branch successfully"
          git clone --branch python3.10 --depth 1 "https://github.com/aws/aws-lambda-base-images.git" aws-lambda-python3.10
          echo "Cloned python3.10 branch successfully"
          git clone --branch master "https://github.com/thisis-charan/dockerlibtest1.git" dockerlibrary
          echo "Cloned Docker library successfully"

      - name: Sync Images and Commit Changes
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_PAT }}
        run: |
          set -e
          function sync_lambda_images() {
            local aws_repo_dir=$1
            local docker_repo_dir=$2
            echo "Starting sync for $aws_repo_dir"
            
            if [ ! -d "$aws_repo_dir" ]; then
              echo "Directory $aws_repo_dir not found."
              return 1
            elif [ -z "$(ls -A $aws_repo_dir/*.tar.xz 2>/dev/null)" ]; then
              echo "No .tar.xz files found in $aws_repo_dir."
              return 1
            fi

            if [ ! -d "$docker_repo_dir" ]; then
              echo "Docker directory $docker_repo_dir not found, creating..."
              mkdir -p "$docker_repo_dir"
            else
              echo "Removing existing .tar.xz files from $docker_repo_dir"
              rm -f $docker_repo_dir/*.tar.xz
            fi

            declare -A aws_files_hash
            declare -A docker_files_hash

            # Calculate hash for AWS files
            for file in $aws_repo_dir/*.tar.xz; do
              if [ -f "$file" ]; then
                local hash=$(sha256sum "$file" | awk '{print $1}')
                aws_files_hash["$hash"]=$(basename "$file")
              fi
            done

            local update_required=false
            for hash in "${!aws_files_hash[@]}"; do
              if [[ ! ${docker_files_hash["$hash"]+_} ]]; then
                echo "Copying new file ${aws_files_hash[$hash]} to $docker_repo_dir"
                update_required=true
                cp "$aws_repo_dir/${aws_files_hash[$hash]}" "$docker_repo_dir/"
              fi
            done

            if [ "$update_required" = true ]; then
              echo "Updates performed for $aws_repo_dir"
            else
              echo "No differences found, no update required."
            fi
          }

          sync_lambda_images "aws-lambda-java11/x86_64" "dockerlibrary/lambda/java/11"
          sync_lambda_images "aws-lambda-python3.10/x86_64" "dockerlibrary/python/3.10"
      - name: Create and push new branch
        id: create_branch  # Ensure this ID matches the ID used later
        run: |
          cd dockerlibrary
          new_branch="feature/$(date +'%Y%m%d-%H%M%S')"
          echo "::set-output name=branch_name::$new_branch"  # Output the branch name
          git checkout -b "$new_branch"
          if git status --porcelain | grep -q '.'; then
            echo "CHANGES_DETECTED=true" >> $GITHUB_ENV
            git config user.name 'GitHub Actions'
            git config user.email 'actions@github.com'
            git remote set-url origin https://x-access-token:${{ secrets.MY_GITHUB_PAT }}@github.com/thisis-charan/dockerlibtest1.git
            git add .
            git commit -m "Updated AWS Lambda base images"
            git push origin "$new_branch"
            echo "Changes pushed to $new_branch"
          else
            echo "No changes to commit."
          fi
      - name: Create Pull Request
        if: env.CHANGES_DETECTED == 'true'
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.MY_GITHUB_PAT }}
          script: |
            const title = "Update AWS Lambda base images";
            const body = "This PR updates the AWS Lambda base images to the latest version.";
            const head = `${{ steps.create_branch.outputs.branch_name }}`; // The branch name you've pushed to
            const base = 'main'; // The branch you want to merge the changes into
            const draft = false; // Set to true if you want the PR to be created as a draft
            github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              head: head,
              base: base,
              draft: draft,
            });    
