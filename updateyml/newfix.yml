#!/usr/bin/env python3
from ruamel.yaml import YAML

def normalize_key(key: str) -> str:
    """
    Convert dashes to underscores for consistent key comparison.
    """
    return key.replace("-", "_").lower()

def update_data(target: dict, source: dict):
    """
    Recursively updates the target dictionary with values from the source
    for keys that already exist in target.
    
    - Keys are compared in a normalized form (dashes replaced with underscores, lowercased).
    - A custom mapping is used for known synonyms.
      For example: "nonprod" in source will update "nprd" in target and 
                   "prod" in source will update "prd" in target.
    """
    # Custom mapping for known synonyms
    custom_mapping = {
        "nonprod": "nprd",
        "prod": "prd"
    }
    
    # Create a mapping of normalized keys to the actual keys in the target.
    norm_target_map = {normalize_key(k): k for k in target.keys()}
    
    for source_key, source_value in source.items():
        norm_source_key = normalize_key(source_key)
        
        # Try to find the key directly in the target.
        if norm_source_key in norm_target_map:
            target_key = norm_target_map[norm_source_key]
        # If not found, check if a custom mapping exists.
        elif norm_source_key in custom_mapping:
            mapped_key = custom_mapping[norm_source_key]
            if mapped_key in norm_target_map:
                target_key = norm_target_map[mapped_key]
            else:
                continue  # Skip if no matching key in target.
        else:
            continue  # Skip keys that don't match.

        target_value = target[target_key]
        if isinstance(target_value, dict) and isinstance(source_value, dict):
            update_data(target_value, source_value)
        else:
            target[target_key] = source_value

def main():
    # Hard-coded file paths (adjust as needed)
    file1_path = r"C:\Users\Sai Charan\OneDrive\Desktop\test\ci.yml"
    file2_path = r"C:\Users\Sai Charan\OneDrive\Desktop\test\cicd.yml"
    output_path = r"C:\Users\Sai Charan\OneDrive\Desktop\test\cicdnew.yml"

    yaml = YAML()
    yaml.indent(mapping=2, sequence=4, offset=2)

    with open(file1_path, 'r') as f1:
        data1 = yaml.load(f1)
    with open(file2_path, 'r') as f2:
        data2 = yaml.load(f2)

    update_data(data2, data1)

    with open(output_path, 'w') as out:
        yaml.dump(data2, out)
    
    print("YAML update completed successfully!")

if __name__ == "__main__":
    main()
